<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\blink_lpc.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\blink_lpc.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Dec 12 09:46:56 2024
<BR><P>
<H3>Maximum Stack Usage =         88 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; simon_iniciar &rArr; rt_GE_lanzador &rArr; svc_alarma_activar
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4]">Reset_Handler</a>
 <LI><a href="#[2b]">__user_initial_stackheap</a>
 <LI><a href="#[52]">switch_to_PLL</a>
 <LI><a href="#[7e]">__Disable_irq</a>
 <LI><a href="#[7f]">__Enable_irq</a>
 <LI><a href="#[18]">__switch$$</a>
 <LI><a href="#[5]">Undef_Handler</a>
 <LI><a href="#[6]">SWI_Handler</a>
 <LI><a href="#[7]">PAbt_Handler</a>
 <LI><a href="#[8]">DAbt_Handler</a>
 <LI><a href="#[9]">IRQ_Handler</a>
 <LI><a href="#[a]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">Undef_Handler</a><BR>
 <LI><a href="#[6]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SWI_Handler</a><BR>
 <LI><a href="#[7]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">PAbt_Handler</a><BR>
 <LI><a href="#[8]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DAbt_Handler</a><BR>
 <LI><a href="#[9]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">IRQ_Handler</a><BR>
 <LI><a href="#[a]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[8]">DAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[a]">FIQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[9]">IRQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7]">PAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6]">SWI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">Undef_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1b]">__main</a> from __main.o(!!!main) referenced from startup.o(RESET)
 <LI><a href="#[18]">__switch$$</a> from simon.o(i.simon) referenced 5 times from simon.o(i.simon)
 <LI><a href="#[e]">drv_botones_tratar</a> from drv_botones.o(i.drv_botones_tratar) referenced from drv_botones.o(i.drv_botones_iniciar)
 <LI><a href="#[d]">drv_cb_desde_hal</a> from drv_botones.o(i.drv_cb_desde_hal) referenced from drv_botones.o(i.drv_botones_iniciar)
 <LI><a href="#[10]">eint0_ISR</a> from hal_ext_int_lpc.o(i.eint0_ISR) referenced from hal_ext_int_lpc.o(i.hal_ext_int_iniciar)
 <LI><a href="#[11]">eint1_ISR</a> from hal_ext_int_lpc.o(i.eint1_ISR) referenced from hal_ext_int_lpc.o(i.hal_ext_int_iniciar)
 <LI><a href="#[12]">eint2_ISR</a> from hal_ext_int_lpc.o(i.eint2_ISR) referenced from hal_ext_int_lpc.o(i.hal_ext_int_iniciar)
 <LI><a href="#[f]">interna_callback</a> from drv_tiempo.o(i.interna_callback) referenced from drv_tiempo.o(i.drv_tiempo_periodico_ms)
 <LI><a href="#[c]">main</a> from main.o(i.main) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[15]">rt_FIFO_encolar</a> from rt_fifo.o(i.rt_FIFO_encolar) referenced from main.o(i.main)
 <LI><a href="#[16]">rt_FIFO_encolar_USR</a> from rt_fifo.o(i.rt_FIFO_encolar_USR) referenced from main.o(i.main)
 <LI><a href="#[17]">rt_GE_tratar</a> from rt_ge.o(i.rt_GE_tratar) referenced from rt_ge.o(i.rt_GE_iniciar)
 <LI><a href="#[19]">simon</a> from simon.o(i.simon) referenced from simon.o(i.simon_iniciar)
 <LI><a href="#[1a]">svc_alarma_tratar</a> from svc_alarma.o(i.svc_alarma_tratar) referenced from svc_alarma.o(i.svc_alarma_iniciar)
 <LI><a href="#[13]">timer0_ISR</a> from hal_tiempo_lpc.o(i.timer0_ISR) referenced from hal_tiempo_lpc.o(i.hal_tiempo_iniciar_tick)
 <LI><a href="#[14]">timer1_ISR</a> from hal_tiempo_lpc.o(i.timer1_ISR) referenced from hal_tiempo_lpc.o(i.hal_tiempo_reloj_periodico_tick)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1e]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[5c]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1f]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[5d]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[23]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[5e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[5f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[60]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[61]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[62]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[63]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[64]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[65]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[66]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[67]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[68]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[69]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[6a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[6b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[6d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[6f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[70]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[71]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[72]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[27]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[73]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[74]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[75]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[76]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[77]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[78]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[79]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1d]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[7a]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[20]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[22]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[7b]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[24]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[7c]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[2d]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[26]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[7d]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[28]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[2b]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[52]"></a>switch_to_PLL</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_consumo_dormir
</UL>

<P><STRONG><a name="[7e]"></a>__Disable_irq</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__Enable_irq</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_uldivmod</STRONG> (ARM, 0 bytes, Stack size 24 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_tiempo_actual_ms
</UL>

<P><STRONG><a name="[80]"></a>_ll_udiv</STRONG> (ARM, 720 bytes, Stack size 24 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>_ll_udiv_donemoving</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_idivmod</STRONG> (ARM, 556 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[25]"></a>exit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[87]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[88]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[89]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_udiv), UNUSED)

<P><STRONG><a name="[2e]"></a>__aeabi_uidivmod</STRONG> (ARM, 48 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div12
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div16
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large_positive
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_generate
</UL>

<P><STRONG><a name="[8c]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>SC_entrar_disable_irq</STRONG> (ARM, 40 bytes, Stack size 0 bytes, hal_concurrencia_lpc.o(i.SC_entrar_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_WDT_feed
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_FIFO_extraer
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_FIFO_encolar_USR
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_WDT_iniciar
</UL>

<P><STRONG><a name="[50]"></a>SC_salir_enable_irq</STRONG> (ARM, 48 bytes, Stack size 0 bytes, hal_concurrencia_lpc.o(i.SC_salir_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_WDT_feed
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_FIFO_extraer
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_FIFO_encolar_USR
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_WDT_iniciar
</UL>

<P><STRONG><a name="[35]"></a>drv_botones_iniciar</STRONG> (ARM, 136 bytes, Stack size 32 bytes, drv_botones.o(i.drv_botones_iniciar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv_botones_iniciar &rArr; hal_ext_int_iniciar
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ext_int_iniciar
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ext_int_habilitar_despertar
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_GE_suscribir
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_sentido
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>drv_botones_tratar</STRONG> (ARM, 292 bytes, Stack size 16 bytes, drv_botones.o(i.drv_botones_tratar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = drv_botones_tratar &rArr; svc_alarma_activar
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ext_int_leerINT
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_ext_int_habilitar_int
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_alarma_activar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_botones.o(i.drv_botones_iniciar)
</UL>
<P><STRONG><a name="[3d]"></a>drv_consumo_dormir</STRONG> (ARM, 4 bytes, Stack size 0 bytes, drv_consumo.o(i.drv_consumo_dormir))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_consumo_dormir
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_GE_tratar
</UL>

<P><STRONG><a name="[3f]"></a>drv_consumo_esperar</STRONG> (ARM, 28 bytes, Stack size 8 bytes, drv_consumo.o(i.drv_consumo_esperar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_consumo_esperar
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_consumo_esperar
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_monitor_marcar
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_monitor_desmarcar
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_GE_lanzador
</UL>

<P><STRONG><a name="[43]"></a>drv_led_apagar</STRONG> (ARM, 32 bytes, Stack size 0 bytes, drv_leds.o(i.drv_led_apagar))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_escribir
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simon
</UL>

<P><STRONG><a name="[45]"></a>drv_led_encender</STRONG> (ARM, 32 bytes, Stack size 0 bytes, drv_leds.o(i.drv_led_encender))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_escribir
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simon
</UL>

<P><STRONG><a name="[46]"></a>drv_leds_iniciar</STRONG> (ARM, 76 bytes, Stack size 16 bytes, drv_leds.o(i.drv_leds_iniciar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = drv_leds_iniciar
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_sentido
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_escribir
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>drv_monitor_desmarcar</STRONG> (ARM, 32 bytes, Stack size 0 bytes, drv_monitor.o(i.drv_monitor_desmarcar))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_escribir
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_consumo_esperar
</UL>

<P><STRONG><a name="[42]"></a>drv_monitor_marcar</STRONG> (ARM, 32 bytes, Stack size 0 bytes, drv_monitor.o(i.drv_monitor_marcar))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_escribir
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_alarma_activar
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_GE_suscribir
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_consumo_esperar
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_GE_iniciar
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_FIFO_encolar_USR
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_FIFO_encolar
</UL>

<P><STRONG><a name="[47]"></a>drv_tiempo_actual_ms</STRONG> (ARM, 44 bytes, Stack size 8 bytes, drv_tiempo.o(i.drv_tiempo_actual_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = drv_tiempo_actual_ms &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tiempo_actual_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interna_callback
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_FIFO_encolar_USR
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_FIFO_encolar
</UL>

<P><STRONG><a name="[4a]"></a>drv_tiempo_iniciar</STRONG> (ARM, 24 bytes, Stack size 8 bytes, drv_tiempo.o(i.drv_tiempo_iniciar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv_tiempo_iniciar
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tiempo_iniciar_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>drv_tiempo_periodico_ms</STRONG> (ARM, 56 bytes, Stack size 0 bytes, drv_tiempo.o(i.drv_tiempo_periodico_ms))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_tiempo_reloj_periodico_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_alarma_iniciar
</UL>

<P><STRONG><a name="[10]"></a>eint0_ISR</STRONG> (ARM, 64 bytes, Stack size 32 bytes, hal_ext_int_lpc.o(i.eint0_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eint0_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ext_int_lpc.o(i.hal_ext_int_iniciar)
</UL>
<P><STRONG><a name="[11]"></a>eint1_ISR</STRONG> (ARM, 64 bytes, Stack size 32 bytes, hal_ext_int_lpc.o(i.eint1_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eint1_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ext_int_lpc.o(i.hal_ext_int_iniciar)
</UL>
<P><STRONG><a name="[12]"></a>eint2_ISR</STRONG> (ARM, 64 bytes, Stack size 32 bytes, hal_ext_int_lpc.o(i.eint2_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eint2_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_ext_int_lpc.o(i.hal_ext_int_iniciar)
</UL>
<P><STRONG><a name="[4e]"></a>hal_WDT_feed</STRONG> (ARM, 36 bytes, Stack size 8 bytes, hal_wdt_lpc.o(i.hal_WDT_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_WDT_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_salir_enable_irq
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_entrar_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_GE_lanzador
</UL>

<P><STRONG><a name="[51]"></a>hal_WDT_iniciar</STRONG> (ARM, 56 bytes, Stack size 8 bytes, hal_wdt_lpc.o(i.hal_WDT_iniciar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_WDT_iniciar
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_salir_enable_irq
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_entrar_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>hal_consumo_dormir</STRONG> (ARM, 32 bytes, Stack size 0 bytes, hal_consumo_lpc.o(i.hal_consumo_dormir))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_PLL
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_consumo_dormir
</UL>

<P><STRONG><a name="[41]"></a>hal_consumo_esperar</STRONG> (ARM, 32 bytes, Stack size 0 bytes, hal_consumo_lpc.o(i.hal_consumo_esperar))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_consumo_esperar
</UL>

<P><STRONG><a name="[38]"></a>hal_ext_int_habilitar_despertar</STRONG> (ARM, 28 bytes, Stack size 0 bytes, hal_ext_int_lpc.o(i.hal_ext_int_habilitar_despertar))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_botones_iniciar
</UL>

<P><STRONG><a name="[3a]"></a>hal_ext_int_habilitar_int</STRONG> (ARM, 68 bytes, Stack size 0 bytes, hal_ext_int_lpc.o(i.hal_ext_int_habilitar_int))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_botones_tratar
</UL>

<P><STRONG><a name="[37]"></a>hal_ext_int_iniciar</STRONG> (ARM, 216 bytes, Stack size 8 bytes, hal_ext_int_lpc.o(i.hal_ext_int_iniciar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_ext_int_iniciar
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_botones_iniciar
</UL>

<P><STRONG><a name="[3c]"></a>hal_ext_int_leerINT</STRONG> (ARM, 80 bytes, Stack size 0 bytes, hal_ext_int_lpc.o(i.hal_ext_int_leerINT))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_botones_tratar
</UL>

<P><STRONG><a name="[44]"></a>hal_gpio_escribir</STRONG> (ARM, 32 bytes, Stack size 0 bytes, hal_gpio_lpc.o(i.hal_gpio_escribir))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_monitor_marcar
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_monitor_desmarcar
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_led_encender
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_led_apagar
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_leds_iniciar
</UL>

<P><STRONG><a name="[53]"></a>hal_gpio_iniciar</STRONG> (ARM, 20 bytes, Stack size 0 bytes, hal_gpio_lpc.o(i.hal_gpio_iniciar))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>hal_gpio_sentido</STRONG> (ARM, 56 bytes, Stack size 0 bytes, hal_gpio_lpc.o(i.hal_gpio_sentido))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_leds_iniciar
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_botones_iniciar
</UL>

<P><STRONG><a name="[48]"></a>hal_tiempo_actual_tick</STRONG> (ARM, 40 bytes, Stack size 0 bytes, hal_tiempo_lpc.o(i.hal_tiempo_actual_tick))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_tiempo_actual_ms
</UL>

<P><STRONG><a name="[4b]"></a>hal_tiempo_iniciar_tick</STRONG> (ARM, 88 bytes, Stack size 0 bytes, hal_tiempo_lpc.o(i.hal_tiempo_iniciar_tick))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_tiempo_iniciar
</UL>

<P><STRONG><a name="[4d]"></a>hal_tiempo_reloj_periodico_tick</STRONG> (ARM, 104 bytes, Stack size 0 bytes, hal_tiempo_lpc.o(i.hal_tiempo_reloj_periodico_tick))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_tiempo_periodico_ms
</UL>

<P><STRONG><a name="[c]"></a>main</STRONG> (ARM, 112 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = main &rArr; simon_iniciar &rArr; rt_GE_lanzador &rArr; svc_alarma_activar
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_alarma_iniciar
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simon_iniciar
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_GE_iniciar
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_FIFO_inicializar
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_iniciar
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_WDT_iniciar
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_tiempo_iniciar
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_leds_iniciar
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_botones_iniciar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[58]"></a>random_generate</STRONG> (ARM, 64 bytes, Stack size 8 bytes, random.o(i.random_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = random_generate
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simon_iniciar
</UL>

<P><STRONG><a name="[5b]"></a>random_init</STRONG> (ARM, 20 bytes, Stack size 0 bytes, random.o(i.random_init))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simon_iniciar
</UL>

<P><STRONG><a name="[15]"></a>rt_FIFO_encolar</STRONG> (ARM, 108 bytes, Stack size 8 bytes, rt_fifo.o(i.rt_FIFO_encolar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_FIFO_encolar &rArr; drv_tiempo_actual_ms &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_monitor_marcar
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_tiempo_actual_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[16]"></a>rt_FIFO_encolar_USR</STRONG> (ARM, 120 bytes, Stack size 16 bytes, rt_fifo.o(i.rt_FIFO_encolar_USR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_FIFO_encolar_USR &rArr; drv_tiempo_actual_ms &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_salir_enable_irq
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_entrar_disable_irq
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_monitor_marcar
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_tiempo_actual_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[59]"></a>rt_FIFO_extraer</STRONG> (ARM, 120 bytes, Stack size 24 bytes, rt_fifo.o(i.rt_FIFO_extraer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_FIFO_extraer
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_salir_enable_irq
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC_entrar_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_GE_lanzador
</UL>

<P><STRONG><a name="[54]"></a>rt_FIFO_inicializar</STRONG> (ARM, 28 bytes, Stack size 0 bytes, rt_fifo.o(i.rt_FIFO_inicializar))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>rt_GE_iniciar</STRONG> (ARM, 208 bytes, Stack size 8 bytes, rt_ge.o(i.rt_GE_iniciar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_GE_iniciar
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_monitor_marcar
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>rt_GE_lanzador</STRONG> (ARM, 144 bytes, Stack size 24 bytes, rt_ge.o(i.rt_GE_lanzador))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_GE_lanzador &rArr; svc_alarma_activar
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_alarma_activar
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_WDT_feed
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_FIFO_extraer
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_consumo_esperar
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simon_iniciar
</UL>

<P><STRONG><a name="[17]"></a>rt_GE_tratar</STRONG> (ARM, 40 bytes, Stack size 0 bytes, rt_ge.o(i.rt_GE_tratar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = rt_GE_tratar &rArr; svc_alarma_activar
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_alarma_activar
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_consumo_dormir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ge.o(i.rt_GE_iniciar)
</UL>
<P><STRONG><a name="[19]"></a>simon</STRONG> (ARM, 796 bytes, Stack size 24 bytes, simon.o(i.simon))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = simon &rArr; svc_alarma_activar
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_alarma_activar
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_led_encender
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_led_apagar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simon.o(i.simon_iniciar)
</UL>
<P><STRONG><a name="[57]"></a>simon_iniciar</STRONG> (ARM, 144 bytes, Stack size 16 bytes, simon.o(i.simon_iniciar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = simon_iniciar &rArr; rt_GE_lanzador &rArr; svc_alarma_activar
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_generate
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_alarma_activar
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_GE_suscribir
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_GE_lanzador
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>svc_GE_suscribir</STRONG> (ARM, 80 bytes, Stack size 8 bytes, rt_ge.o(i.svc_GE_suscribir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svc_GE_suscribir
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_monitor_marcar
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_alarma_iniciar
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simon_iniciar
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_botones_iniciar
</UL>

<P><STRONG><a name="[3b]"></a>svc_alarma_activar</STRONG> (ARM, 512 bytes, Stack size 40 bytes, svc_alarma.o(i.svc_alarma_activar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svc_alarma_activar
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_monitor_marcar
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simon
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_botones_tratar
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_GE_tratar
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_GE_lanzador
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simon_iniciar
</UL>

<P><STRONG><a name="[56]"></a>svc_alarma_iniciar</STRONG> (ARM, 84 bytes, Stack size 16 bytes, svc_alarma.o(i.svc_alarma_iniciar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svc_alarma_iniciar &rArr; svc_GE_suscribir
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svc_GE_suscribir
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_tiempo_periodico_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>svc_alarma_tratar</STRONG> (ARM, 136 bytes, Stack size 32 bytes, svc_alarma.o(i.svc_alarma_tratar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svc_alarma_tratar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> svc_alarma.o(i.svc_alarma_iniciar)
</UL>
<P><STRONG><a name="[13]"></a>timer0_ISR</STRONG> (ARM, 52 bytes, Stack size 12 bytes, hal_tiempo_lpc.o(i.timer0_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer0_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_tiempo_lpc.o(i.hal_tiempo_iniciar_tick)
</UL>
<P><STRONG><a name="[14]"></a>timer1_ISR</STRONG> (ARM, 52 bytes, Stack size 24 bytes, hal_tiempo_lpc.o(i.timer1_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer1_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_tiempo_lpc.o(i.hal_tiempo_reloj_periodico_tick)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f]"></a>interna_callback</STRONG> (ARM, 28 bytes, Stack size 8 bytes, drv_tiempo.o(i.interna_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = interna_callback &rArr; drv_tiempo_actual_ms &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_tiempo_actual_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_tiempo.o(i.drv_tiempo_periodico_ms)
</UL>
<P><STRONG><a name="[d]"></a>drv_cb_desde_hal</STRONG> (ARM, 48 bytes, Stack size 0 bytes, drv_botones.o(i.drv_cb_desde_hal))
<BR>[Address Reference Count : 1]<UL><LI> drv_botones.o(i.drv_botones_iniciar)
</UL>
<P><STRONG><a name="[18]"></a>__switch$$</STRONG> (ARM, 0 bytes, Stack size unknown bytes, simon.o(i.simon))
<BR>[Address Reference Count : 1]<UL><LI> simon.o(i.simon)
</UL>
<P><STRONG><a name="[5]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>__arm_div_large_positive</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[33]"></a>__arm_div16</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[32]"></a>__arm_div12</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[31]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[30]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[2f]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[2c]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
